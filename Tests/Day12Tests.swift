  import Testing

  @testable import AdventOfCode

  @Suite("Day12 Tests")
  struct Day12Tests {
  @Suite("Parser Tests")
  struct ParserTests {
    @Test("Test parser implementation")
    func parseInput() {
       let day = Day12(data: testInput)
       #expect(day.grid.count == 16)
       let p1 = day.grid[.init(3,3)]
       let p2 = day.grid[.init(2,3)]
       let p3 = day.grid[.init(2,4)]
       
       #expect(p1 == "C")
       #expect(p2 == "E")
       #expect(p3 ==  nil)
    }
  }
          

  @Suite("Tests on sample inputs")
  struct SolutionsTests {
    @Suite("Tests on sample inputs")
    struct SolutionsTests {
      let day = Day12(data: testInput)
      let day1 = Day12(data: testInput1)

      @Test("Part1 example")
      func testPart1() async throws {
          let result = try await day.part1()
          #expect(result == 1930)
      }

       @Test("Part1A example")
      func testPart1A() async throws {
          let result = try await day1.part1()
          #expect(result == 1930)
      }
       @Test("1 x 4 Region")
       func test4x1Region() {
          let points: Set<Point> = [.init(2,2), .init(3,2), .init(4, 2), .init(5, 2)]
          var plotter = Plotter(points: points)
          let edges = plotter.countRuns()
          #expect(edges == 4)
       }
       
       @Test("2 x 4 Region")
       func test2x4Region() {
          let points: Set<Point> = [.init(2,2), .init(3,2), .init(4, 2), .init(5, 2), .init(2,3), .init(3,3), .init(4, 3), .init(5, 3)]
          var plotter = Plotter(points: points)
          let edges = plotter.countRuns()
          #expect(edges == 4)
       }
       
       @Test("L Region")
       func testLRegion() {
          let points: Set<Point> = [.init(2,2), .init(3,2), .init(4, 2), .init(5, 2), .init(5,3), .init(5,4), .init(5,5), .init(5, 6)]
          var plotter = Plotter(points: points)
          let edges = plotter.countRuns()
          #expect(edges == 6)
      }

      @Test("Part2 example")
      func testPart2() async throws {
          let result = try await day.part2()
          #expect(result == 10)
      }
    }
  }
}

private let testInput =
"""
RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE
"""

private let testInput1 =
"""
YYYYYYYYYEJJEEEEEEEEEEEEEEGGGGGGGGGGGGGGGGGGCCCCCCCCCCWWCCLLLKKKKJKKKKKKFFFFFFFBBBBBBBBBBBAEEEEEEEEEEEEPPPPPPPPPOOOOZYYYZZZZZZAAUUUUUUUUUUUU
YYYYYYYYNEEEEEEEEEEEEEEEEEGGGGGGGGGGGGGGGGGCCCCCCCCCCCCCCCLLLLKKKKKKKKKKKFFFFFBBFBOBBBBBBBBBEEEEEEEEEEEPPPPPPOOOOOOOZZZZZZZZZZZAAUKUUUUUUUUU
YYYYYYNNNNYEEEEEEEEEEEEEEEGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCCCCCLKKKKKKKKKKKKFFFFFFFFBBBBBBBBBBBBEEEEEEEEPPPPPPPOOOOOOOOOZZZZZZZZZUUUUUUUUUUUUUU
YYYNNNNNNNEEEEEEEEEEEEEEEEEGGGGGGGGGGGGGGGVVVVCCCCCCCCCRREEEEKKKKKKKKKKKKFFFFFFXFBBBBBBMMBBBBBEEEEEFEPPPPPPOOOOOOOOOOOZZZZZZZZZZUUUUUUUUUUUU
YYYNNNNNNWWEEEEEEEEEEEEEEEEGGGGGGGGGGGGGGGWVVVVVCCCCCCRRREEMEEKKKKKKKKKKKFFFFFXXFFBBBMBMMEEEEEEEEEEEPPPPPPPOOOOOOOOOOOZZZZZZZZZUUUUUUUUUUUUU
YYNNNNNNNNEEEEEEEEEEEEEEEEEEIIIIGGGGGGGGGWWWVVVVVCCCCCCEEEEMEKKKKKKKKKKKKKFFFFXXXBBBMMMMMEEEEEEEEEEEPPPPPPPPOOOOOOOOOOOOZZZZUUZUUUUUUUUUUUUU
YNNNNNNNNNNEEEEEEEEEEEEEEEEEIIIIGGGGGGGWWWWVVVVWWWWCWCCWEEMMMKKKKKKKKKKKKKFFFFXXXXXXMMMMEEEEEEEEEEEPPPPHHHHPPOOOOOOOOOOOZZZUUUUUUUUUUUUUUUUN
NNNNNNNNNNNNEEKEEKKKVEEEEEEIIIIIGIGGVGGGWCWWWWVVVWWWWCWWMMMMKKKKKKKKKKKKKKXXXXXXXXXXMMMMMEEEEEEEEEEPPHHHHHHPPOOOOOOOOOOOZZZUUUUUUUUUUUUUUUUN
NNNNNNNNNNNNAKKKKKKKKEEEEEEIIIIIIIGVVGGGWCCWWWWWWWWWWWWWWMMMMMMBBBKKKKBKKKBBXXXXXXXXMMXMMMEMMEEEEEQCPCHHHHHHPPOOOVVVOOOOZOOOOUUUUUUUUUUUUUNN
JJNNNNNNNNNNNKKKKKKKKEEEETTTTTTTTTGGGGGGCCCWWWWMWMMWWWWWWWMMMMMMMBBBKBBBKBBBBXXXXXXXXXXMMMMMMEEEQQQCCCHHHHHHHPVOOVVVOVOOOOOOOOOUUUUUUUUUUNNN
JJNNJNNNNNNJKKKKKKKKKKEEETTTTTTTTTTTIGGGCCCCWWWMMMMMWWWWWWWWWWMMKVBBBBNBBBBBBXXXXXXXXXXMMMMMMEEQQYQCCCHHHHHHHVVOOVVVVVOOOOOOOOOOUUQQUUUUNNNN
JJNNJNNNJJJJJKKKKKKKKKKKZTTTTTTTTTTTTTCGCCCCWWWMMMMMWWWWWWWWWWMVKVBBBNNNNBBBBXXXXXXBXNMMMMMMMMHQQQQCCCCHHHHHVVVHVVVVVVVVOOOFFFOOQQQQUNNNNNNN
JJJJJNNNJJJJJJKKKKKKKKKZZTTTTTTTTTTTTTCCCCCCCWMMMMWWWWWWWVWWVVVVVVBBBNXNNNNBBBBXXBBBMMMMMMMMMQQQQQQCCCCHHHHHHVVHVVVVVVVVOFFFFFOOQQQQUQNNNNNN
JJJJJNIJJJJJKKKKKKKKKKKKZZZZITTTTTTTTTCCCCCCCCMMMMWWWWWWVVVVVVVVVVVBVNNNNNNNBBBBXBBBBBMMMMMMMKQQQQQQCQCHHHHHHVVVVVVVVVVVVFFFFFOQQQQQQQQNNNNN
JJJJJJJJJJJJJKKKKKKKKKKKZLZZZTTTTTTTTTCCCCCCCCMMMMMMMWVWVVVVVVVVVVVVVNNNNNNNBBBBXBBBBBMMMMMMMQQQQQQQQQHHHHHMHHZVVVVVVVVVVVFFQOOOQQQQQQNNNNNN
JJJJJJJJJJCCCKVKKKKKKKZZZLLLLZZCTTTTCCCCCCCCCCMMMMMMMMVVVVVVVVVVVVVVNNNNNNRRRRRBBBBBMMRRRMMMMMQQQQQQQQMMMXMMMHVVVVVVVVVVVVQQQQQOOOQQQQNNNNNN
JJJJJJJJJJCCCCKKKKKKKZZZLLLLCCCCTTTTTTTTTCCLLMMMMMMMMMTVVVVVVVVVVVVVNNNNNNRRRRRRRBBBMMMMRMMMMQQQQQQQQQMMMMMMMEMVVVVVVVVVVVQQQHQQQQQQQQNNNNNN
"""
